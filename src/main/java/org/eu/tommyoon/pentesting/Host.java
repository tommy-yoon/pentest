package org.eu.tommyoon.pentesting;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import jakarta.annotation.Nonnull;
import lombok.Data;

@Data
public class Host {
	@Nonnull
	private int id;
	@Nonnull
	private String ip;
	private List<Integer> openPorts = new ArrayList<Integer>();
	private String os = "unknwon";
	private HostStatusEnum status;

	private String name;
	private boolean exploited;
	private List<String> vaulnerabilites;
	private List<String> exploits;

	public Host(int index, String address) {
		this.id = index;
		this.ip = address;
	}

	@Override
	public String toString() {
		return "[Host details]\n" 
				+ "Index: " + id + "\n" 
				+ "IP: " + ip + "\n" 
				+ "OS: " + os + "\n" 
				+ "Status: " + status + "\n"
				+ "Selected?:" + this.exploited + "\n"
				+ "OpenPorts: <typical usage>\n"
				+ createOpenPortsLines() + "\n"
				+ "Found vaulnerabilites: \n"
				+ displayListInColumns(2, vaulnerabilites) + "\n"
				;
	}

//	public String toString() {
//	    return String.format("[Host details]\n" +
//	            "index: %d\n" +
//	            "IP: %s\n" +
//	            "os: %s\n" +
//	            "status: %s\n" +
//	            "OpenPorts: <typical usage>\n%s",
//	            id, padToWidth(ip, 20), padToWidth(os, 20), padToWidth(status.toString(), 20), createOpenPortsLines());
//	}
//
//	private String padToWidth(String input, int width) {
//	    return String.format("%-" + width + "s", input);
//	}
	
	

	private String displayListInColumns(int columns, List list) {
		StringBuilder result = new StringBuilder();

		for (int i = 0; i < list.size(); i += columns) {
			int end = Math.min(i + columns, list.size());

			for (int j = i; j < end; j++) {
				result.append(String.format("\t%-5s", list.get(j)));
			}
			result.append("\n");
		}

		return result.toString();
	}
	
	private String createOpenPortsLines() {
//		String result = "";
//
//		int index = 0;
//		for (Integer integer : openPorts) {
//			result += "\t" + String.valueOf(integer) + ": " + getPortMap(integer);
//			index++;
//			if (index < openPorts.size()) {
//				result += "\n";
//			}
//		}
//
//		return result;
		int columns = 3; // Number of columns
		StringBuilder result = new StringBuilder();

		for (int i = 0; i < openPorts.size(); i += columns) {
			int end = Math.min(i + columns, openPorts.size());

			for (int j = i; j < end; j++) {
				result.append(String.format("\t%-5s: %-25s", openPorts.get(j), getPortMap(openPorts.get(j))));
			}
			result.append("\n");
		}

		return result.toString();
	}

	private String getPortMap(Integer port) {
		switch (port) {
		case 7:
			return "ECHO";
		case 9:
			return "Discard";
		case 13:
			return "Daytime Protocol";
		case 17:
			return "gotd";
		case 19:
			return "Chargen";
		case 20:
			return "FTP Data";
		case 21:
			return "FTP Control";
		case 22:
			return "SSH";
		case 23:
			return "Telnet";
		case 25:
			return "SMTP";
		case 53:
			return "DNS";
		case 67:
			return "DHCP Server";
		case 68:
			return "DHCP Client";
		case 80:
			return "HTTP";
		case 110:
			return "POP3";
		case 119:
			return "NNTP";
		case 123:
			return "NTP";
		case 135:
			return "MSRPC";
		case 137:
			return "NetBIOS Name Service";
		case 138:
			return "NetBIOS Datagram Service";
		case 139:
			return "NetBIOS Session Service";
		case 143:
			return "IMAP";
		case 161:
			return "SNMP";
		case 162:
			return "SNMP Trap";
		case 443:
			return "HTTPS";
		case 445:
			return "Microsoft-DS (SMB)";
		case 514:
			return "Syslog";
		case 515:
			return "printer";
		case 993:
			return "IMAPS";
		case 995:
			return "POP3S";
		case 1080:
			return "Socks Proxy";
		case 3389:
			return "RDP";
		case 3306:
			return "MySQL";
		case 5432:
			return "PostgreSQL";
		case 1521:
			return "Oracle";
		default:
			return "";
		}
	}

	public void sortPortsByPortNo() {
		openPorts = openPorts.stream().sorted((portA, portB) -> portA.compareTo(portB)).collect(Collectors.toList());
	}
}