package org.eu.tommyoon.pentesting;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import jakarta.annotation.Nonnull;
import lombok.Data;

//@Data
public class Host {
	@Nonnull
	private int id;
	@Nonnull
	private String ip;
	private List<Integer> openPorts = new ArrayList<Integer>();
	private String os = "unknwon";
	private HostStatusEnum status;
	
	

	public Host(int index, String address) {
		this.id = index;
		this.ip = address;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getIp() {
		return ip;
	}

	public void setIp(String ip) {
		this.ip = ip;
	}

	public List<Integer> getOpenPorts() {
		return openPorts;
	}

	public void setOpenPorts(List<Integer> openPorts) {
		this.openPorts = openPorts;
	}

	public String getOs() {
		return os;
	}

	public void setOs(String os) {
		this.os = os;
	}

	public HostStatusEnum getStatus() {
		return status;
	}

	public void setStatus(HostStatusEnum status) {
		this.status = status;
	}

	@Override
	public String toString() {
		return "[Host details]\n" + "index: " + id + "\n" + "IP: " + ip + "\n" + "os: " + os + "\n" + "status: "
				+ status + "\n" + "OpenPorts: <typical usage>\n" + createOpenPortsLines() + "";
	}

	private String createOpenPortsLines() {
		String result = "";

		int index = 0;
		for (Integer integer : openPorts) {
			result += "\t" + String.valueOf(integer) + ": " + getPortMap(integer);
			index++;
			if (index < openPorts.size()) {
				result += "\n";
			}
		}

		return result;
	}

	private String getPortMap(Integer port) {
		switch (port) {
		case 80:
			return "HTTP";
		case 443:
			return "HTTPS";
		case 13:
			return "Daytime Protocol";
		case 20:
		case 21:
			return "FTP";
		case 22:
			return "SSH";
		case 23:
			return "Telnet";
		case 25:
			return "SMTP";
		case 53:
			return "DNS";
		case 110:
			return "POP3";
		case 143:
			return "IMAP";
		case 161:
		case 162:
			return "SNMP";
		case 3389:
			return "RDP";
		case 3306:
			return "MySQL";
		case 5432:
			return "PostgreSQL";
		case 1521:
			return "Oracle";
		case 445:
			return "SMB";
		case 123:
			return "NTP";
		default:
			return "";
		}
	}

	public void sortPortsByPortNo() {
		openPorts = openPorts.stream().sorted((portA, portB) -> portA.compareTo(portB)).collect(Collectors.toList());
	}
}