package org.eu.tommyoon.pentesting;

import org.jline.terminal.Terminal;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.shell.Availability;
import org.springframework.shell.result.CommandNotFoundMessageProvider;
import org.springframework.shell.standard.ShellCommandGroup;
import org.springframework.shell.standard.ShellComponent;
import org.springframework.shell.standard.ShellMethod;
import org.springframework.shell.standard.ShellMethodAvailability;
import org.springframework.shell.standard.ShellOption;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;

@ShellComponent
@ShellCommandGroup("Main Commands")
public class MyCommands {
	@Autowired
	PortScanner portScanner;
	
	@Autowired
	HostService hostList;
	
	@Autowired
	Terminal terminal;

	@ShellMethod
	public void example() {
		terminal.writer().println("hi");
		terminal.writer().flush();
	}
	
	@ShellMethod(key= {"test", "t"}, value="TEST", group="TEST")
	public void test() {
		System.out.println("test");
	}
	
	@Bean
	CommandNotFoundMessageProvider provider2() {
		return ctx -> "My custom message";
	}
	
	/*
	 * scanning
	 */
	@ShellMethod(key = { "scan", "s" }, value = "Scan available IP addresses and open ports. e.g., 192.168.32.0 24")
	public void scan(@ShellOption(help = "IP address", defaultValue = "192.168.137.2") 
	String ipAddress, @Min(0) @Max(32)
			@ShellOption(help = "CIDR e.g., 24 or 30", defaultValue = "30")
	int CIDR) throws Exception{
		if (hostList.isScanned()) {
			System.out.println("Scan data exists - use [list] command");
		} else {
			portScanner.scan(ipAddress, CIDR);
		}
	}
	
	@ShellMethod(key= {"list", "l"}, value="List the available hosts with IP address and open port numbers")
	public void list() {
		portScanner.list();
	}
	
	@ShellMethodAvailability({"list"})
	public Availability listAvailability() {
        return hostList.isScanned()
            ? Availability.available()
            : Availability.unavailable("No scanned data exists");
    }
}
