package org.eu.tommyoon.pentesting;

import java.io.IOException;
import java.math.BigInteger;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.util.ArrayList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Pentest implements CommandLineRunner {

	private static Logger LOG = LoggerFactory.getLogger(Pentest.class);

	public static void main(String[] args) {
		SpringApplication.run(Pentest.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		LOG.info("EXECUTING : command line runner");
		
	    ArrayList<Machine> hosts = new ArrayList<Machine>(); 

		for (int i = 0; i < args.length; ++i) {
			LOG.info("args[{}]: {}", i, args[i]);
		}
		if (args.length < 2) {
			System.out.println("Usage : <ipaddress> or <ipaddress>/<CIDR>");
			System.out.println("Example : 192.168.137.2/24");
			return;
		}
		String ipAddress = args[0];
		int CIDR = 0;
		try {
			CIDR = Integer.parseInt(args[1]);
		} catch (NumberFormatException e) {
			System.out.println("ERROR: The value of CIDR should be integer");
			return;
		}

//		Machine machine = new Machine();
//		machine.setIp("127.0.0.1");
//		boolean result = isPortOpen("127.0.0.1", 445, 20);
//		System.out.println("result : " + result);
		ArrayList<String> addresses = null;
		try {
			addresses = findAvailableHosts(ipAddress, CIDR);
		} catch (UnknownHostException e) {
			System.out.println("ERROR: IP addresses are not in proper format");
			return;
		}

		/*
		 * create hosts per address - by pinging
		 */
		int index = 0;
		for (String address : addresses) {
//			index++;
//			System.out.println(++index + " : " + address);
		}

		/*
		 * find open ports per IP
		 */
		for (String address : addresses) {
			/*
			 * port scan from 1 to 65535
			 */
			for (int port = 1; port <= 65535; port++) {
				boolean result = isPortOpen(address, port, 20);
				System.out.printf("Result for %s : %d is %s \n", address, port, result);
			}
		}
	}

	private boolean isPortOpen(String ip, int port, int timeout) {
		try {
			Socket socket = new Socket();
			socket.connect(new InetSocketAddress(ip, port), timeout);
			socket.close();
			return true;
		} catch (IOException e) {
			return false;
		}
	}

	private static ArrayList<String> findAvailableHosts(String ipAddress, int cidr) throws UnknownHostException {
		var addresses = new ArrayList<String>();

		byte[] bytes = InetAddress.getByName(ipAddress).getAddress();
		var ipVal = new BigInteger(1, bytes);

		BigInteger mask = BigInteger.ONE.shiftLeft(32 - cidr).subtract(BigInteger.ONE).not();
		BigInteger network = ipVal.and(mask);
		BigInteger broadcast = network.add(mask.not());

		for (BigInteger ip = network.add(BigInteger.ONE); ip.compareTo(broadcast) < 0; ip = ip.add(BigInteger.ONE)) {
			byte[] ipBytes = ByteBuffer.allocate(4).putInt(ip.intValue()).array();
			addresses.add(InetAddress.getByAddress(ipBytes).getHostAddress());
			
			
		}

		return addresses;
	}
}
