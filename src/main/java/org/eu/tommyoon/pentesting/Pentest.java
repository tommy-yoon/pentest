package org.eu.tommyoon.pentesting;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Pentest implements CommandLineRunner {
	
	private static Logger LOG = LoggerFactory.getLogger(Pentest.class);

	public static void main(String[] args) {
		SpringApplication.run(Pentest.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		LOG.info("EXECUTING : command line runner");
		 
        for (int i = 0; i < args.length; ++i) {
            LOG.info("args[{}]: {}", i, args[i]);
        }
		if (args.length<2) {
			System.out.println("Usage : <ipaddress> or <ipaddress>/<CIDR>");
			System.out.println("Example : 192.168.137.2/24");
			return;
		}
		String ipAddress = args[0];
		int CIDR = 0;
		try {
			CIDR = Integer.parseInt(args[1]);
		} catch (NumberFormatException e) {
			System.out.println("ERROR: The value of CIDR should be integer");
			return;
		}
		
//		Machine machine = new Machine();
//		machine.setIp("127.0.0.1");
//		boolean result = isPortOpen("127.0.0.1", 445, 20);
//		System.out.println("result : " + result);
		ArrayList<String> addresses = calculateAddresses(ipAddress, CIDR);

		for (String address : addresses) {
			System.out.println(address);
		}
	}
	
	private boolean isPortOpen(String ip, int port, int timeout) {
		try {
			Socket socket = new Socket();
			socket.connect(new InetSocketAddress(ip, port), timeout);
			socket.close();
			return true;
		} catch (IOException e) {
			return false;
		}
	}

	public static ArrayList<String> calculateAddresses(String ipAddress, int cidr) {
        ArrayList<String> addresses = new ArrayList<>();
        try {
            InetAddress networkAddress = InetAddress.getByName(ipAddress);
            byte[] networkBytes = networkAddress.getAddress();

            int addressCount = (int) Math.pow(2, (32 - cidr));

            for (int i = 0; i < addressCount; i++) {
                byte[] nextAddressBytes = incrementIPAddress(networkBytes, i);
                addresses.add(InetAddress.getByAddress(nextAddressBytes).getHostAddress());
            }
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        return addresses;
    }

    public static byte[] incrementIPAddress(byte[] ipAddress, int increment) {
        int carry = increment;
        for (int i = ipAddress.length - 1; i >= 0; i--) {
            int sum = (ipAddress[i] & 0xff) + carry;
            ipAddress[i] = (byte) sum;
            if (sum <= 0xff) {
                break;
            }
            carry = sum >>> 8;
        }
        return ipAddress;
    }
}
