
package org.eu.tommyoon.pentesting.rpc.model;

import java.net.URI;
import java.net.URISyntaxException;

import lombok.Data;

@Data
public class SavedRpcServer {

    private String name;
    private boolean ssl;
    private String rpcHost;
    private String rpcToken;
    private String rpcUser;
    private int rpcPort;

    public SavedRpcServer() {
        rpcHost = "";
        rpcUser = "msf";
        rpcPort = 55553;
    }
    
    public SavedRpcServer(String name, boolean ssl, String rpcHost, String rpcUser, int rpcPort) {
		super();
		this.name = name;
		this.ssl = ssl;
		this.rpcHost = rpcHost;
		this.rpcUser = rpcUser;
		this.rpcPort = rpcPort;
	}

	public String getRpcServerName() {
        if (this.name != null) {
            return name;
        }
        return serverString(this);
    }

    public static String serverString(SavedRpcServer savedRpcServer) {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(savedRpcServer.ssl ? "msfs" : "msf");
        stringBuffer.append("://");
        stringBuffer.append(savedRpcServer.rpcUser);
        stringBuffer.append("@");
        stringBuffer.append(savedRpcServer.rpcHost);
        stringBuffer.append(":");
        stringBuffer.append(savedRpcServer.rpcPort);
        return stringBuffer.toString();
    }

    public static SavedRpcServer fromString(String uriString) throws URISyntaxException {
        URI uri = new URI(uriString);
        SavedRpcServer savedRpcServer = new SavedRpcServer();
        savedRpcServer.ssl = true;
        String scheme = uri.getScheme();
        if (scheme != null && scheme.length() > 1 && !scheme.endsWith("s")) {
            savedRpcServer.ssl = false;
        }
        savedRpcServer.rpcHost = uri.getHost();
        savedRpcServer.rpcUser = uri.getUserInfo();
        int port = uri.getPort();
        if (port == -1) {
            port = 55553;
        }
        savedRpcServer.rpcPort = port;
        return savedRpcServer;
    }


}
