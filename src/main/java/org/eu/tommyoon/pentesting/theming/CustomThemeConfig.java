package org.eu.tommyoon.pentesting.theming;

import org.eu.tommyoon.pentesting.HostService;
import org.jline.utils.AttributedString;
import org.jline.utils.AttributedStyle;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.shell.jline.PromptProvider;
import org.springframework.shell.result.CommandNotFoundMessageProvider;
import org.springframework.shell.style.FigureSettings;
import org.springframework.shell.style.StyleSettings;
import org.springframework.shell.style.Theme;
import org.springframework.shell.style.ThemeResolver;
import org.springframework.shell.style.ThemeSettings;

@Configuration
public class CustomThemeConfig {
	private static final String ENTER_YOUR_COMMAND_TYPE_HELP_TO_SEE_COMMANDS_EXIT_TO_EXIT = "Enter your command(Type 'help' to see commands | 'exit' to exit): ";

	@Bean
	CommandNotFoundMessageProvider provider() {
		return ctx -> "Command not found";
	}
	
	@Autowired
	HostService hostService;
	
	@Bean
	PromptProvider myPromptProvider() {
	    return () -> {
	    	String prompt = hostService.getSelectedHost()==null
	    			?ENTER_YOUR_COMMAND_TYPE_HELP_TO_SEE_COMMANDS_EXIT_TO_EXIT
	    					: "Target=" + hostService.getSelectedHost().getIp() + " - " + ENTER_YOUR_COMMAND_TYPE_HELP_TO_SEE_COMMANDS_EXIT_TO_EXIT;
	    	return new AttributedString(prompt, AttributedStyle.BOLD.foreground(AttributedStyle.BRIGHT));
	    };
	}
	
	@Bean
	Theme myTheme() {
		return new Theme() {
			@Override
			public String getName() {
				return "mytheme";
			}

			@Override
			public ThemeSettings getSettings() {
				return new MyThemeSettings();
			}
		};
	}
	
//	@Autowired
//	private ThemeResolver resolver;
//
//	void resolve() {
//		String resolvedStyle = resolver.resolveStyleTag(StyleSettings.TAG_TITLE);
//		// bold,fg:bright-white
//
//		AttributedStyle style = resolver.resolveStyle(resolvedStyle);
//		// jline attributed style from expression above
//
//		String resolvedFigure = resolver.resolveFigureTag(FigureSettings.TAG_ERROR);
//		// character i.e. U+2716 Heavy Multiplication X Emoji, cross
//	}
}